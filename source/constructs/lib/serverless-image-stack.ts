// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import { PriceClass } from '@aws-cdk/aws-cloudfront';
import { Aspects, Aws, CfnMapping, CfnOutput, CfnParameter, Construct, Stack, StackProps, Tags } from '@aws-cdk/core';

import { SuppressLambdaFunctionCfnRulesAspect } from '../utils/aspects';
import { BackEnd } from './back-end/back-end-construct';
import { CommonResources } from './common-resources/common-resources-construct';
import { FrontEndConstruct as FrontEnd } from './front-end/front-end-construct';
import { SolutionConstructProps, YesNo, Environments } from './types';

export interface ServerlessImageHandlerStackProps extends StackProps {
  readonly description: string;
  readonly solutionId: string;
  readonly solutionName: string;
  readonly solutionVersion: string;
  readonly solutionDisplayName: string;
  readonly solutionAssetHostingBucketNamePrefix: string;
}

export class ServerlessImageHandlerStack extends Stack {
  constructor(scope: Construct, id: string, props: ServerlessImageHandlerStackProps) {
    super(scope, id, props);

    const corsEnabledParameter = new CfnParameter(this, 'CorsEnabledParameter', {
      type: 'String',
      description: `Would you like to enable Cross-Origin Resource Sharing (CORS) for the image handler API? Select 'Yes' if so.`,
      allowedValues: ['Yes', 'No'],
      default: 'No'
    });

    const corsOriginParameter = new CfnParameter(this, 'CorsOriginParameter', {
      type: 'String',
      description: `If you selected 'Yes' above, please specify an origin value here. A wildcard (*) value will support any origin. We recommend specifying an origin (i.e. https://example.domain) to restrict cross-site access to your API.`,
      default: '*'
    });

    const deployDemoUIParameter = new CfnParameter(this, 'DeployDemoUIParameter', {
      type: 'String',
      description:
        'Would you like to deploy a demo UI to explore the features and capabilities of this solution? This will create an additional Amazon S3 bucket and Amazon CloudFront distribution in your account.',
      allowedValues: ['Yes', 'No'],
      default: 'Yes'
    });

    const logRetentionPeriodParameter = new CfnParameter(this, 'LogRetentionPeriodParameter', {
      type: 'Number',
      description: 'This solution automatically logs events to Amazon CloudWatch. Select the amount of time for CloudWatch logs from this solution to be retained (in days).',
      allowedValues: ['1', '3', '5', '7', '14', '30', '60', '90', '120', '150', '180', '365', '400', '545', '731', '1827', '3653'],
      default: '1'
    });

    const autoWebPParameter = new CfnParameter(this, 'AutoWebPParameter', {
      type: 'String',
      description: `Would you like to enable automatic WebP based on accept headers? Select 'Yes' if so.`,
      allowedValues: ['Yes', 'No'],
      default: 'No'
    });

    const enableSignatureParameter = new CfnParameter(this, 'EnableSignatureParameter', {
      type: 'String',
      description: `Would you like to enable the signature? If so, select 'Yes' and provide SecretsManagerSecret and SecretsManagerKey values.`,
      allowedValues: ['Yes', 'No'],
      default: 'No'
    });

    const secretsManagerSecretParameter = new CfnParameter(this, 'SecretsManagerSecretParameter', {
      type: 'String',
      description: 'The name of AWS Secrets Manager secret. You need to create your secret under this name.',
      default: ''
    });

    const secretsManagerKeyParameter = new CfnParameter(this, 'SecretsManagerKeyParameter', {
      type: 'String',
      description: 'The name of AWS Secrets Manager secret key. You need to create secret key with this key name. The secret value would be used to check signature.',
      default: ''
    });

    const autoGeneratedImagePrefixParameter = new CfnParameter(this, 'AutoGeneratedImagePrefixParameter', {
      type: 'String',
      description: 'The prefix for the auto generated thumbnails. e.g. pn-auto-generated-thumbnail-image.jpg',
      default: 'pn-auto-generated-thumbnail'
    });

    const presignedUrlExpiresInSecondsParameter = new CfnParameter(this, 'PresignedUrlExpiresInSecondsParameter', {
      type: 'Number',
      description: 'The expire time in seconds for the auto generated thumbnails presigned urls. e.g. 600 seconds',
      default: '600'
    });

    const jwtSecretPathOnParameterStoreParameter = new CfnParameter(this, 'JwtSecretPathOnParameterStoreParameter', {
      type: 'String',
      description: 'The path on Parameter Store to the JWT Secret Key on the current environment to validate the received JWT Tokens. e.g. /pn-services/dev/AppConfig/Tokens/SecretKey',
      default: '/pn-services/dev/AppConfig/Tokens/SecretKey'
    });

    const cloudFrontPriceClassParameter = new CfnParameter(this, 'CloudFrontPriceClassParameter', {
      type: 'String',
      description: 'The AWS CloudFront price class to use. For more information see: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html',
      allowedValues: [PriceClass.PRICE_CLASS_ALL, PriceClass.PRICE_CLASS_200, PriceClass.PRICE_CLASS_100],
      default: PriceClass.PRICE_CLASS_ALL
    });

    const environmentParameter = new CfnParameter(this, 'EnvironmentParameter', {
      type: 'String',
      description: 'The Environment we are deploying to.',
      allowedValues: ['dev', 'test', 'staging', 'prod'],
      default: 'dev'
    });

    const solutionMapping = new CfnMapping(this, 'Solution', {
      mapping: {
        Config: {
          SolutionId: props.solutionId,
          Version: props.solutionVersion,
          S3BucketPrefix: props.solutionAssetHostingBucketNamePrefix,
          S3KeyPrefix: `${props.solutionName}/${props.solutionVersion}`
        }
      },
      lazy: true
    });

    const sourceCodeBucketName = `${solutionMapping.findInMap('Config', 'S3BucketPrefix')}-${Aws.REGION}`;
    const sourceCodeKeyPrefix = solutionMapping.findInMap('Config', 'S3KeyPrefix');

    const solutionConstructProps: SolutionConstructProps = {
      environment: environmentParameter.valueAsString as Environments,
      corsEnabled: corsEnabledParameter.valueAsString,
      corsOrigin: corsOriginParameter.valueAsString,
      deployUI: deployDemoUIParameter.valueAsString as YesNo,
      logRetentionPeriod: logRetentionPeriodParameter.valueAsNumber,
      autoWebP: autoWebPParameter.valueAsString,
      enableSignature: enableSignatureParameter.valueAsString as YesNo,
      secretsManager: secretsManagerSecretParameter.valueAsString,
      secretsManagerKey: secretsManagerKeyParameter.valueAsString,
      autoGeneratedImagePrefix: autoGeneratedImagePrefixParameter.valueAsString,
      presignedUrlExpiresInSeconds: presignedUrlExpiresInSecondsParameter.valueAsString,
      jwtSecretPathOnParameterStore: jwtSecretPathOnParameterStoreParameter.valueAsString
    };

    const commonResources = new CommonResources(this, 'CommonResources', {
      solutionId: props.solutionId,
      solutionVersion: props.solutionVersion,
      solutionName: props.solutionName,
      solutionDisplayName: props.solutionDisplayName,
      sourceCodeBucketName: sourceCodeBucketName,
      sourceCodeKeyPrefix: sourceCodeKeyPrefix,
      ...solutionConstructProps
    });

    const frontEnd = new FrontEnd(this, 'FrontEnd', {
      environment: solutionConstructProps.environment,
      logsBucket: commonResources.logsBucket,
      conditions: commonResources.conditions
    });

    const backEnd = new BackEnd(this, 'BackEnd', {
      sourceCodeBucketName: sourceCodeBucketName,
      sourceCodeKeyPrefix: sourceCodeKeyPrefix,
      solutionVersion: props.solutionVersion,
      solutionName: props.solutionName,
      solutionDisplayName: props.solutionDisplayName,
      secretsManagerPolicy: commonResources.secretsManagerPolicy,
      logsBucket: commonResources.logsBucket,
      uuid: commonResources.customResources.uuid,
      cloudFrontPriceClass: cloudFrontPriceClassParameter.valueAsString,
      ...solutionConstructProps
    });

    commonResources.customResources.setupValidateSecretsManager({
      secretsManager: secretsManagerSecretParameter.valueAsString,
      secretsManagerKey: secretsManagerKeyParameter.valueAsString
    });

    commonResources.customResources.setupCopyWebsiteCustomResource({
      hostingBucket: frontEnd.websiteHostingBucket
    });

    commonResources.customResources.setupPutWebsiteConfigCustomResource({
      hostingBucket: frontEnd.websiteHostingBucket,
      apiEndpoint: backEnd.domainName
    });

    this.templateOptions.metadata = {
      'AWS::CloudFormation::Interface': {
        ParameterGroups: [
          {
            Label: { default: 'Environment' },
            Parameters: [environmentParameter.logicalId, jwtSecretPathOnParameterStoreParameter.logicalId ]
          },
          {
            Label: { default: 'Auto-generated Images Options' },
            Parameters: [autoGeneratedImagePrefixParameter.logicalId ]
          },
          {
            Label: { default: 'Presigned URL Options' },
            Parameters: [presignedUrlExpiresInSecondsParameter.logicalId]
          },
          {
            Label: { default: 'CORS Options' },
            Parameters: [corsEnabledParameter.logicalId, corsOriginParameter.logicalId]
          },
          {
            Label: { default: 'Demo UI' },
            Parameters: [deployDemoUIParameter.logicalId]
          },
          {
            Label: { default: 'Event Logging' },
            Parameters: [logRetentionPeriodParameter.logicalId]
          },
          {
            Label: {
              default:
                'Image URL Signature (Note: Enabling signature is not compatible with previous image URLs, which could result in broken image links. Please refer to the implementation guide for details: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/considerations.html)'
            },
            Parameters: [enableSignatureParameter.logicalId, secretsManagerSecretParameter.logicalId, secretsManagerKeyParameter.logicalId]
          },
          {
            Label: { default: 'Auto WebP' },
            Parameters: [autoWebPParameter.logicalId]
          }
        ],
        ParameterLabels: {
          [corsEnabledParameter.logicalId]: { default: 'CORS Enabled' },
          [corsOriginParameter.logicalId]: { default: 'CORS Origin' },
          [deployDemoUIParameter.logicalId]: { default: 'Deploy Demo UI' },
          [logRetentionPeriodParameter.logicalId]: { default: 'Log Retention Period' },
          [autoWebPParameter.logicalId]: { default: 'AutoWebP' },
          [enableSignatureParameter.logicalId]: { default: 'Enable Signature' },
          [secretsManagerSecretParameter.logicalId]: { default: 'SecretsManager Secret' },
          [secretsManagerKeyParameter.logicalId]: { default: 'SecretsManager Key' },
          [cloudFrontPriceClassParameter.logicalId]: { default: 'CloudFront PriceClass' },
          [autoGeneratedImagePrefixParameter.logicalId]: { default: 'Auto-generated Images Prefix' },
          [presignedUrlExpiresInSecondsParameter.logicalId]: { default: 'Auto-generated Presigned URL Expiration' },
          [jwtSecretPathOnParameterStoreParameter.logicalId]: { default: 'Authorization JWT Secret Path on Parameter Store' }
        }
      }
    };

    /* eslint-disable no-new */
    new CfnOutput(this, 'ApiEndpoint', { value: `https://${backEnd.domainName}`, description: 'Link to API endpoint for sending image requests to.' });
    new CfnOutput(this, 'DemoUrl', {
      value: `https://${frontEnd.domainName}/index.html`,
      description: 'Link to the demo user interface for the solution.',
      condition: commonResources.conditions.deployUICondition
    });
    new CfnOutput(this, 'CorsEnabled', {
      value: corsEnabledParameter.valueAsString,
      description: 'Indicates whether Cross-Origin Resource Sharing (CORS) has been enabled for the image handler API.'
    });
    new CfnOutput(this, 'CorsOrigin', {
      value: corsOriginParameter.valueAsString,
      description: 'Origin value returned in the Access-Control-Allow-Origin header of image handler API responses.',
      condition: commonResources.conditions.enableCorsCondition
    });
    new CfnOutput(this, 'LogRetentionPeriod', {
      value: logRetentionPeriodParameter.valueAsString,
      description: 'Number of days for event logs from Lambda to be retained in CloudWatch.'
    });

    Aspects.of(this).add(new SuppressLambdaFunctionCfnRulesAspect());
    Tags.of(this).add('SolutionId', props.solutionId);
    Tags.of(this).add('Environment', solutionConstructProps.environment);
    
  }
}
